
ML\<open>

val pat = HOLogic.mk_Trueprop (HOLogic.mk_not (@{term "prefix :: string \<Rightarrow> string \<Rightarrow> bool"} $ Var (("pref", 0), @{typ string}) $ Var (("var", 0), @{typ string})))
val pat_prem = HOLogic.mk_Trueprop (HOLogic.mk_mem (Var (("el", 0), @{typ string}), Var (("set", 0), @{typ "string set"})))

fun match_thm ctxt thm = ((Thm.match (Thm.cterm_of ctxt pat_prem, Thm.cprop_of thm); true)
  handle Pattern.MATCH => (false))

val t = match_thm @{context} @{thm refl}

fun solve_not_prefix ctxt i = Subgoal.FOCUS (fn (focus : Subgoal.focus) => ((Thm.match (Thm.cterm_of (#context focus) pat, #concl focus);
  case find_first (match_thm (#context focus)) (#prems focus) of
    SOME prem => cut_tac prem 1 THEN Clasimp.fast_force_tac (#context focus) 1
  | NONE => all_tac)
  handle Pattern.MATCH => all_tac)) ctxt i

val solver_not_prefix = Simplifier.mk_solver "cook-levin prefix solver" solve_not_prefix
\<close>

method_setup solve_not_prefix = \<open>Attrib.thms >> (fn thms => fn ctxt =>
SIMPLE_METHOD (solve_not_prefix ctxt 1))\<close>
  "solve a not prefix goal in the context of refining to IMP- in the Cook-Levin thingy"
